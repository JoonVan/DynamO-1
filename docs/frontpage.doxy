/*! \mainpage DynamO source code documentation
 
  The C++ code consists of several programs which share a common code base. This code base is in the src/ directory. The main programs are:
  
  - dynarun (dynarun.cpp) - The main simulation program. dynarun takes configuration files as input and runs them in a simulation. OutputPlugin(s) can be used to collect data on the simulation as it runs (e.g., viscosity).
  
  - dynamod (dynamod.cpp) - The configuration
  editor/generator. Its primary purpose is to generate starting configurations for dynarun or configurations to be used as a basis for your Simulation. However, dynamod can also edit/modify existing configuration files (e.g., rescale the temperature, zero the total momentum, add a thermostat).
 
  - dynahist_rw (dynahist_rw.cpp) - Used to perform histogram
  reweighting on the output from a replica exchange/ parallel tempering
  Simulation (see the simulation engine EReplicaExchangeSimulation).
  
  \note To learn how to use these executables, see the tutorial section of the DynamO site, or just run "dyna*** --help" on the command line.
 
  Unfortunately doxygen doesn't support multiple programs in one
  documentation, thus only the main() function of dynarun is
  available here. If you are looking at the source code for the first
  time it is probably best to start here in main(), in dynarun.cpp then
  branch out reading just the description of each class.
 
  Alternatively if you wish to jump in, \ref dynamo::Simulation::runSimulation()
  is the very inner loop of a single simulation.
 */

/*! \brief Namespace for the event driven simulation components of the DynamO
simulation package. */ 
namespace dynamo {}

/*! \brief Namespace for the coil visualisation library. */
namespace coil {}

/*! \brief Namespace for the magnet library, where simple math code
which is shared between the dynamo and coil namespaces are held.  */

namespace magnet {
  
  //! \brief Namespace for Gtkmm classes and functions.
  namespace gtk {}

  //! \brief Implementation details for global magnet namespace functions.
  namespace detail {}
  
  /*! \brief Namespace for the magnet shape-line intersection functions.
   *
   * These functions determine the intersection points between lines
   * and surfaces.
   */
  namespace intersection {}

  /*! \brief Namespace for the magnet shape-shape overlap functions.
   *
   * These functions determine if two objects are currently
   * overlapping in a 3D space.
   */
  namespace overlap {}

  //! \brief Namespace for io stream classes and functions.
  namespace stream {}

  //! \brief Namespace for string manipulation functions.
  namespace string {}

  //! \brief Namespace for threading functions and classes.
  namespace thread {}

  /*! \brief Namespace for magnet math functions and classes. */
  namespace math {}

  //! \brief Namespace for all magnet OpenGL classes and functions.
  namespace GL {

    //! \brief Classes representing renderable objects.
    namespace objects {
      //! \brief Classes to generate the vertex positions for OpenGL
      //! primitive objects
      namespace primitives {}
    }
    
    //! \brief Implementation details for OpenGL classes and functions.
    namespace detail {}
    
    //! \brief Contains OpenGL Shader objects.
    namespace shader {
      //! \brief Implementation details for the OpenGL shaders
      namespace detail {}
    }
  }

  /*! \brief Namespace for memory management classes.*/
  namespace memory {
    /*! \brief Namespace for memory management implementation
     * details.
     */
    namespace detail {}
  }

  /*! \brief Contains a definition of the special control commands for
   *   the console.
   * 
   * The commands in this namespace allow formatting of VT100
   * compatible terminals. This works for most linux terminals with
   * only a few exceptions.
   */
  namespace console {}


  /*! \brief Namespace for image output functions.*/
  namespace image {
    
    /*! \brief Implementation details for image functions.*/
    namespace detail {}
  }
}
